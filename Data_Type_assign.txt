#Que1 --- Discuss string slicing and provide examples

String Slicing in Python
String slicing is a method in Python used to extract a portion (or slice) of a string by specifying a start, stop, and step. This operation returns a new string that is a subset of the original.

Syntax--
string[start:stop:step]

start: The index where the slice begins (inclusive). If omitted, it defaults to 0.
stop: The index where the slice ends (exclusive). If omitted, it defaults to the length of the string.
step: The interval between each character in the slice. If omitted, it defaults to 1.

1. Basic slicing

text = "Hello, World!"
print(text[0:5])  # Output: Hello


2.Omitting Start or Stop

text = "Hello, World!"
print(text[:5])   # Output: Hello
print(text[7:])   # Output: World!


3.Using a Negative Index

text = "Hello, World!"
print(text[-6:])  # Output: World!


4.Skipping Characters with Step

text = "Hello, World!"
print(text[::2])  # Output: Hlo ol!


5.Reversing a String

text = "Hello, World!"
print(text[5:0:-1])  # Output: olleH



#Que2 --- Explain the key features of lists in Python

Lists in Python are a versatile and widely-used data structure. 
They are essentially ordered collections of items, which can be of any data type.

---Here are the key features of lists in Python:

1. Ordered Collection
.Feature: Lists maintain the order of the elements. 
The order in which elements are added to the list is the order in which they are stored and accessed.

numbers = [1, 2, 3, 4]
print(numbers[0])  # Output: 1

2. Mutable
Feature: Lists are mutable, meaning you can modify their elements after creation.
You can change, add, or remove elements.

fruits = ["apple", "banana", "cherry"]
fruits[1] = "blueberry"
print(fruits)  # Output: ['apple', 'blueberry', 'cherry']


3. Heterogeneous Elements
Feature: A list can contain elements of different data types, including other lists.

mixed_list = [1, "hello", 3.14, [2, 4]]
print(mixed_list)  # Output: [1, 'hello', 3.14, [2, 4]]



4. Dynamic Size
Feature: Lists can grow and shrink in size as needed. 
You can add or remove elements without specifying the size of the list in advance.


animals = ["cat", "dog"]
animals.append("elephant")
print(animals)  # Output: ['cat', 'dog', 'elephant']



5. Support for Indexing and Slicing
Feature: You can access individual elements using their index, and you can slice a list to create sublists.


numbers = [10, 20, 30, 40, 50]
print(numbers[2])     # Output: 30
print(numbers[1:4])   # Output: [20, 30, 40]



6. Built-in Methods
Feature: Python provides a variety of built-in methods to work with lists,
 including append(), remove(), sort(), reverse(), and pop().


items = [5, 3, 8, 1]
items.sort()
print(items)  # Output: [1, 3, 5, 8]



7. Iterability
Feature: Lists can be easily iterated over using loops, making them convenient for repetitive tasks.

for fruit in ["apple", "banana", "cherry"]:
    print(fruit)



8. Nested Lists
Feature: Lists can contain other lists, allowing the creation of complex data structures like matrices.


matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
print(matrix[1][2])  # Output: 6



9. Support for List Comprehensions
Feature: Python provides a concise way to create lists using list comprehensions,
which are expressions within square brackets.


squares = [x**2 for x in range(5)]
print(squares)  # Output: [0, 1, 4, 9, 16]


10. Flexible and Versatile
Feature: Lists are used for a wide variety of purposes, 
from storing simple data collections to more complex data structures like stacks, queues, and more.



stack = []
stack.append(1)
stack.append(2)
stack.append(3)
stack.pop()
print(stack)  # Output: [1, 2]




#Que3--- Describe how to access, modify, and delete elements in a list with examples

Accessing, Modifying, and Deleting Elements in a List
Lists in Python are mutable and support various operations for accessing, modifying, and deleting elements.

1. Accessing Elements
You can access elements in a list using indexing, slicing, or looping.

Accessing a Single Element:

Syntax: list[index]
Example:

fruits = ["apple", "banana", "cherry"]
print(fruits[1])  # Output: banana


Accessing a Range of Elements (Slicing):

Syntax: list[start:stop:step]
Example:

numbers = [10, 20, 30, 40, 50]
print(numbers[1:4])  # Output: [20, 30, 40]


Accessing Elements Using a Loop:

Example:

for fruit in fruits:
    print(fruit)


2. Modifying Elements
You can modify elements directly by assigning new values to specific indices or by modifying multiple elements using slicing.

Modifying a Single Element:

Syntax: list[index] = new_value


fruits = ["apple", "banana", "cherry"]
fruits[1] = "blueberry"
print(fruits)  # Output: ['apple', 'blueberry', 'cherry']


Modifying a Range of Elements:

Syntax: list[start:stop] = new_values
Example:

numbers = [10, 20, 30, 40, 50]
numbers[1:3] = [25, 35]
print(numbers)  # Output: [10, 25, 35, 40, 50]


Appending Elements:

Syntax: list.append(value)
Example:

fruits = ["apple", "banana"]
fruits.append("cherry")
print(fruits)  # Output: ['apple', 'banana', 'cherry']


Inserting Elements:

Syntax: list.insert(index, value)
Example:

fruits = ["apple", "cherry"]
fruits.insert(1, "banana")
print(fruits)  # Output: ['apple', 'banana', 'cherry']



3. Deleting Elements
Elements in a list can be removed using the del statement, the pop() method, or the remove() method.

Deleting by Index:

Syntax: del list[index]
Example:

fruits = ["apple", "banana", "cherry"]
del fruits[1]
print(fruits)  # Output: ['apple', 'cherry']


Deleting a Range of Elements:

Syntax: del list[start:stop]
Example:


numbers = [10, 20, 30, 40, 50]
del numbers[1:3]
print(numbers)  # Output: [10, 40, 50]




#Que4 --- Compare and contrast tuples and lists with examples

Tuples and lists are both fundamental data structures in Python, but they have distinct characteristics and use cases. Hereâ€™s a comparison of the two, along with examples:

1. Syntax and Definition
Lists:

Defined using square brackets [ ].
Examples:

my_list = [1, 2, 3, 4]


---- Tuples:

Defined using parentheses ( ).

Example:
my_tuple = (1, 2, 3, 4)




2. Mutability
Lists:

Mutable, meaning you can change their content after creation (add, remove, or modify elements).

my_list = [1, 2, 3]
my_list[1] = 10
my_list.append(4)
print(my_list)  # Output: [1, 10, 3, 4]



Tuples:

Immutable, meaning once created, their content cannot be changed. You cannot add, remove, or modify elements.


my_tuple = (1, 2, 3)
# my_tuple[1] = 10  # This will raise a TypeError




3. Use Cases
Lists:

Suitable for collections of items that might need to be modified.
Commonly used for dynamic data where the size or content might change over time.
Tuples:

Suitable for collections of items that should not change. They are often used to represent fixed collections of items.
Commonly used for fixed data structures, such as records or keys in dictionaries.


4. Performance
Lists:

Slightly slower than tuples due to their dynamic nature and overhead associated with allowing modifications.
More memory overhead because they need to handle the possibility of changes.
Tuples:

Generally faster and require less memory than lists due to their immutability.
Because they are immutable, their size and content are fixed, which can lead to performance benefits in certain scenarios.



5. Methods and Operations
Lists:

Support a variety of methods for modifying the list, such as append(), extend(), insert(), remove(), pop(), clear(), and sort().


my_list = [1, 2, 3]
my_list.append(4)
my_list.remove(2)
my_list.sort()
print(my_list)  # Output: [1, 3, 4]



Tuples:

Support fewer methods since they are immutable. The main methods available are count() and index().

my_tuple = (1, 2, 3, 1)
print(my_tuple.count(1))  # Output: 2
print(my_tuple.index(2))  # Output: 1






#Que5---- Describe the key features of sets and provide examples of their use

Sets in Python are a built-in data structure designed to store unique elements. They are unordered collections that do not allow duplicate values. Here are the key features of sets along with examples:

Key Features of Sets
1. Unordered Collection

Feature: Sets do not maintain any particular order for their elements. The order in which elements are stored is not guaranteed.

Example:

my_set = {1, 2, 3, 4}
print(my_set)  # Output: {1, 2, 3, 4} (order may vary)



2. Unique Elements

Feature: Sets automatically discard duplicate elements. Each element in a set must be unique.

Example:

my_set = {1, 2, 2, 3, 4, 4}
print(my_set)  # Output: {1, 2, 3, 4}


3.Mutable

Feature: Sets are mutable; you can add or remove elements after creation. However, the elements themselves must be immutable (e.g., numbers, strings, tuples).

my_set = {1, 2, 3}
my_set.add(4)
my_set.remove(2)
print(my_set)  # Output: {1, 3, 4}



4.No Indexing

Feature: Sets do not support indexing, slicing, or other sequence-like behavior.
Elements must be accessed through iteration or set operations.


my_set = {1, 2, 3}
for element in my_set:
    print(element)


5. Mathematical Set Operations

Feature: Sets support various mathematical operations such as union, intersection, difference, and symmetric difference.
Examples

set1 = {1, 2, 3}
set2 = {3, 4, 5}
union_set = set1 | set2
print(union_set)  # Output: {1, 2, 3, 4, 5}





Use Cases of Sets
1. Removing Duplicates

Example:
numbers = [1, 2, 2, 3, 4, 4, 5]
unique_numbers = set(numbers)
print(unique_numbers)  # Output: {1, 2, 3, 4, 5}


2.Membership Testing
my_set = {1, 2, 3}
print(2 in my_set)  # Output: True
print(5 in my_set)  # Output: False


3.Set Operations in Data Analysis

data1 = {1, 2, 3, 4}
data2 = {3, 4, 5, 6}
common_data = data1 & data2
print(common_data)  # Output: {3, 4}


4.Efficient Data Storage and Retrieval

unique_words = set()
with open('textfile.txt') as file:
    for line in file:
        words = line.strip().split()
        unique_words.update(words)
print(unique_words)


#Que6---- Discuss the use cases of tuples and sets in Python programming

Tuples and sets in Python serve distinct purposes and are used in various programming scenarios. Hereâ€™s a detailed look at their use cases:

Use Cases of Tuples
1. Immutable Data Structures

Use Case: When you need to store a collection of items that should not change after creation.
coordinates = (40.7128, -74.0060)  # Latitude and Longitude of New York


2. Function Return Values

Use Case: When a function needs to return multiple values. Tuples are a convenient way to return multiple items from a function.



3.Key for Dictionaries

Use Case: Tuples can be used as keys in dictionaries because they are hashable and immutable. This is not possible with lists.


locations = {('New York', 'NY'): 1, ('Los Angeles', 'CA'): 2}
print(locations[('New York', 'NY')])  # Output: 1



4. Named Tuples

Use Case: When you need an immutable data structure with named fields, which can enhance code readability and self-documentation.

from collections import namedtuple

Person = namedtuple('Person', ['name', 'age'])
person = Person(name='John', age=25)
print(person.name)  # Output: John
print(person.age)   # Output: 25




Use Cases of Sets
1. Removing Duplicates

Use Case: When you need to ensure that a collection of items contains only unique elements. 
Sets automatically handle duplicate values.

numbers = [1, 2, 2, 3, 4, 4, 5]
unique_numbers = set(numbers)
print(unique_numbers)  # Output: {1, 2, 3, 4, 5}


2.Membership Testing
Use Case: For efficiently checking if an item is present in a collection. 
Membership testing in sets is faster than in lists due to the underlying hash table implementation.


allowed_users = {'Alice', 'Bob', 'Charlie'}
print('Alice' in allowed_users)  # Output: True
print('David' in allowed_users)  # Output: False


3.Set Operations

Use Case: When you need to perform mathematical set operations such as union,
intersection, difference, and symmetric difference.


set1 = {1, 2, 3}
set2 = {3, 4, 5}
print(set1 | set2)  # Output: {1, 2, 3, 4, 5}



4.Data Deduplication

Use Case: For deduplicating data or ensuring uniqueness in a collection, such as in data cleaning tasks.


email_list = ['alice@example.com', 'bob@example.com', 'alice@example.com']
unique_emails = set(email_list)
print(unique_emails)  # Output: {'alice@example.com', 'bob@example.com'}



5.Efficient Set Operations

Use Case: For efficient set operations when working with large datasets. 
Operations such as adding, removing, and checking membership are optimized in sets.


large_set = set(range(1000))
print(500 in large_set)  # Output: True





#Que7------ Describe how to add, modify, and delete items in a dictionary with examples

Dictionaries in Python are mutable data structures that store key-value pairs. You can add, modify, and delete items in a dictionary using various methods. Hereâ€™s a detailed explanation with examples:

1. Adding Items
You can add items to a dictionary by assigning a value to a new key. If the key already exists, the value will be updated; otherwise, a new key-value pair will be added.

Syntax: dict[key] = value

my_dict = {'apple': 1, 'banana': 2}

# Adding a new key-value pair
my_dict['cherry'] = 3
print(my_dict)  # Output: {'apple': 1, 'banana': 2, 'cherry': 3}

# Modifying an existing key-value pair
my_dict['banana'] = 4
print(my_dict)  # Output: {'apple': 1, 'banana': 4, 'cherry': 3}


2. Modifying Items
You can modify an existing item by reassigning a new value to an existing key.

Syntax: dict[key] = new_value

Examples:
my_dict = {'apple': 1, 'banana': 2}

# Modifying the value of an existing key
my_dict['apple'] = 5
print(my_dict)  # Output: {'apple': 5, 'banana': 2}



3. Deleting Items
You can delete items from a dictionary using the del statement, the pop() method, or the popitem() method.

Using del:

Syntax: del dict[key]

Examples:
my_dict = {'apple': 1, 'banana': 2, 'cherry': 3}

# Deleting an item by key
del my_dict['banana']
print(my_dict)  # Output: {'apple': 1, 'cherry': 3}



#Que8---Discuss the importance of dictionary keys being immutable and provide examples

Dictionaries in Python are mutable data structures that store key-value pairs. You can add, modify, and delete items in a dictionary using various methods. Hereâ€™s a detailed explanation with examples:

1. Adding Items
You can add items to a dictionary by assigning a value to a new key. If the key already exists, the value will be updated; otherwise, a new key-value pair will be added.

Syntax: dict[key] = value

Example:

my_dict = {'apple': 1, 'banana': 2}

# Adding a new key-value pair
my_dict['cherry'] = 3
print(my_dict)  # Output: {'apple': 1, 'banana': 2, 'cherry': 3}

# Modifying an existing key-value pair
my_dict['banana'] = 4
print(my_dict)  # Output: {'apple': 1, 'banana': 4, 'cherry': 3}


2. Modifying Items
You can modify an existing item by reassigning a new value to an existing key.

Syntax: dict[key] = new_value
Example:

my_dict = {'apple': 1, 'banana': 2}

# Modifying the value of an existing key
my_dict['apple'] = 5
print(my_dict)  # Output: {'apple': 5, 'banana': 2}



3. Deleting Items
You can delete items from a dictionary using the del statement, the pop() method, or the popitem() method.

Using del:

Syntax: del dict[key]

Example:
my_dict = {'apple': 1, 'banana': 2, 'cherry': 3}

# Deleting an item by key
del my_dict['banana']
print(my_dict)  # Output: {'apple': 1, 'cherry': 3}

